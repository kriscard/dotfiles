{
  "Interface Definition": {
    "prefix": "int",
    "body": [
      "interface ${1:InterfaceName} {",
      "  ${2:property}: ${3:type}",
      "}"
    ],
    "description": "TypeScript interface definition"
  },
  "Type Definition": {
    "prefix": "type",
    "body": [
      "type ${1:TypeName} = ${2:definition}"
    ],
    "description": "TypeScript type alias"
  },
  "Async Function": {
    "prefix": "afn",
    "body": [
      "const ${1:functionName} = async (${2:params}): Promise<${3:ReturnType}> => {",
      "  ${0:// function body}",
      "}"
    ],
    "description": "Async arrow function with Promise return type"
  },
  "Try-Catch Block": {
    "prefix": "tryc",
    "body": [
      "try {",
      "  ${1:// try block}",
      "} catch (error) {",
      "  console.error('${2:Error message}:', error)",
      "  ${3:// error handling}",
      "}"
    ],
    "description": "Try-catch block with error logging"
  },
  "useState Hook": {
    "prefix": "ust",
    "body": [
      "const [${1:state}, set${1/(.*)/${1:/capitalize}/}] = useState${2:<${3:type}>}(${4:initialValue})"
    ],
    "description": "useState hook with typed state"
  },
  "useEffect Hook": {
    "prefix": "uef",
    "body": [
      "useEffect(() => {",
      "  ${1:// effect logic}",
      "  ${2:return () => {",
      "    // cleanup",
      "  \\}}",
      "}, [${3:dependencies}])"
    ],
    "description": "useEffect hook with cleanup and dependencies"
  }
}